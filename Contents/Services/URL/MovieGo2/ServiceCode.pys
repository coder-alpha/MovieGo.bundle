#!/usr/bin/env python

import urllib2, re, urlparse

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'
FALLBACK = 'http://i.imgur.com/hs80kyz.png'

RE_TITLE = Regex(r'( \(\d+\)$)')
RE_DUR = Regex(r'(\d+)(h|min|sec)')
RE_UPPOD = Regex(r'([Uu]ppod\(\{)')
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\'\?]+(?<!m3u8|smil))["\']')
RE_VID = Regex(r'id\: ["\']([^"\']+)["\']\}')
BASE_URL = "http://moviego.cc"
FALLBACK = "http://i.imgur.com/75YO83o.jpg"

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = get_data(url)
	url = data['url']
	
	try:
		page = HTML.ElementFromURL(url, cacheTime=10)
	except:
		raise Ex.MediaNotAvailable

	title = page.xpath("//h1[@id='news-title']/text()")
	if not title:
		raise Ex.MediaExpired
	title = RE_TITLE.sub(r'', title[0].strip())

	summary = page.xpath("//div[@itemprop='description']/text()")
	summary = (Regex(r'(Watch free movie online ["\']{}.+$)'.format(title)).sub(r'', summary[0])).strip() if summary else None

	thumb = page.xpath("//div[@class='poster cf']/img/@src")
	thumb2 = page.xpath('//meta[@property="og:image"]/@content')

	thumb = BASE_URL + thumb[0] if thumb else FALLBACK
	thumb2 = thumb2[0] if thumb2 else FALLBACK

	time_stamp = int(Datetime.TimestampFromDatetime(Datetime.Now()))
	art = '/:/plugins/com.plexapp.plugins.moviego/resources/art-default.jpg?t={}'.format(time_stamp)

	rating = page.xpath('//span[@class="imdb rki"]/text()')

	genres = page.xpath('//td[text()="Genre:"]/following-sibling::td/a/text()')

	dur = page.xpath('//td[text()="Duration:"]/following-sibling::td/text()')
	if dur:
		try:
			duration = Datetime.MillisecondsFromString(dur[0])
		except:
			try:
				duration = 0
				for i, s in RE_DUR.findall(dur[0]):
					if s == 'h':
						duration += int(i)*60*60*1000
					elif s == 'min':
						duration += int(i)*60*1000
					elif s == 'sec':
						duration += int(i)*1000
			except:
				duration = None
	else:
		duration = None

	year = page.xpath('//td[text()="Year:"]/following-sibling::td//a/text()')

	return MovieObject(
		title=title,
		summary=summary,
		duration=duration,
		genres=genres[1:] if genres else [],
		year=int(year[0]) if year else None,
		thumb=Resource.ContentsOfURLWithFallback([thumb, thumb2, FALLBACK]),
		rating=float(rating[0]) if rating else None,
		source_title='MovieGo',
		art=art
		)

####################################################################################################
def MediaObjectsForURL(url):

	data = get_data(url)
	media_obj = []
	
	jsonDataUrl = data['apilink']
	try:
		jsonData = HTTP.Request(jsonDataUrl, cacheTime=0).content
		files = JSON.ObjectFromString(jsonData)
	except:
		files = [{'file':'http://d3auje5car4oak.cloudfront.net/v/644/6449323_a-01.mp4','label':'360p', 'type':'mp4'}]

	sortable_list = []
	for file in files:
		furl = file['file']
		res = file['label'].replace('p','')
		if res != '1080':
			res = '0'+res
		type = file['type']
		
		sortable_list.append({'label': res, 'file':furl, 'type':type})
		
	newlist = sorted(sortable_list, key=lambda k: k['label'], reverse=True)
	
	useRedirect = False
	redUrl = None
	try:
		if data['useRedirector'] == 'true':
			useRedirect = True
			redUrl = data['url']
	except:
		pass
	
	for file in newlist:
		furl = file['file']
		res = int(file['label'])
		type = file['type']
		mo = MediaObject(
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				video_resolution = res,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=furl))]
			)
		
		media_obj.append(mo)
		
	return media_obj

####################################################################################################
@indirect
def PlayVideo(url, useRedirect=False, refUrl=None, **kwargs):

	http_headers = {'User-Agent': USER_AGENT}
	if useRedirect and refUrl != None:
		url = GetRedirect(url, 10, ref=refUrl)
		http_headers['Referer'] = refUrl
		
	return IndirectResponse(VideoClipObject, key=url, http_headers=http_headers)

####################################################################################################
def get_data(url):
	return JSON.ObjectFromString(D(url.split('mvg2://')[1]))
	
####################################################################################################
def PlayDuration(url):

	clean_url = (url.split('/preview')[0].split('/edit')[0].split('/view')[0])
	split_url = clean_url.split('/')
	id = split_url[len(split_url)-1]
	url = 'https://docs.google.com/get_video_info?docid=%s' % (id)
	data = HTTP.Request(url, headers={'User-Agent': USER_AGENT}, cacheTime=300).content
	data_array = data.split('&')
	for dataline in data_array:
		if 'length_seconds' in dataline:
			key_val_pair = dataline.split('=')
			duration = int(key_val_pair[1].strip()) * 1000
			return duration
	return None
	
#########################################################################################################

def GetRedirect(url, timeout=10, ref=None):
	class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):
		def redirect_request(self, req, fp, code, msg, headers, newurl):
			newreq = urllib2.HTTPRedirectHandler.redirect_request(self,
				req, fp, code, msg, headers, newurl)
			if newreq is not None:
				self.redirections.append(newreq.get_full_url())
			return newreq
	
	redirectHandler = HTTPRedirectHandler()
	redirectHandler.max_redirections = 10
	redirectHandler.redirections = []

	opener = urllib2.build_opener(redirectHandler)
	opener = urllib2.install_opener(opener)
	
	headers = {}
	headers['User-Agent'] = USER_AGENT
	
	if ref != None:
		headers['Referer'] = '%s://%s/' % (urlparse.urlparse(url).scheme, urlparse.urlparse(url).netloc)

	request = urllib2.Request(url, headers=headers)

	try:
		response = urllib2.urlopen(request, timeout=int(timeout))
		for redURL in redirectHandler.redirections:
			#urlList.append(redURL) # make a list, might be useful
			url = redURL
			
		Log("Redirect Url: %s" % url)
		return url
	except urllib2.HTTPError as response:
		Log('URL: %s' % url)
		Log('Error: %s' % response)
		return url
